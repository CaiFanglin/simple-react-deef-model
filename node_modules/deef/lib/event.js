'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eventTypeList = ['error', 'hmr', 'injectCallback']; /**
                                                         * @file deef
                                                         * @copyright Copyright (c) 2017 Baidu, Inc. All Rights Reserved.
                                                         */

var Event = function () {
    function Event() {
        var _this = this;

        (0, _classCallCheck3.default)(this, Event);

        this.hooks = {};
        eventTypeList.forEach(function (event) {
            return _this.hooks[event] = [];
        });
    }

    (0, _createClass3.default)(Event, [{
        key: 'on',
        value: function on(type, handler) {
            var hooks = this.hooks;
            (0, _invariant2.default)(hooks[type], 'deef->on: unknown hook type: ' + type);
            var fns = hooks[type];
            fns.push(handler);
            return this.off.bind(this, type, handler);
        }
    }, {
        key: 'off',
        value: function off(type, handler) {
            this.hooks[type] = this.hooks[type].filter(function (fn) {
                return fn !== handler;
            });
        }
    }, {
        key: 'trigger',
        value: function trigger(type, args) {
            var fns = this.hooks[type];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(fns), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var fn = _step.value;

                    fn.apply(null, args);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);
    return Event;
}();

exports.default = Event;