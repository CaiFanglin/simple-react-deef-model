'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = function () {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _opts$initialReducer = opts.initialReducer,
        initialReducer = _opts$initialReducer === undefined ? {} : _opts$initialReducer,
        _opts$initialState = opts.initialState,
        initialState = _opts$initialState === undefined ? {} : _opts$initialState,
        _opts$extraMiddleware = opts.extraMiddlewares,
        extraMiddlewares = _opts$extraMiddleware === undefined ? [] : _opts$extraMiddleware,
        _opts$extraEnhancers = opts.extraEnhancers,
        extraEnhancers = _opts$extraEnhancers === undefined ? [] : _opts$extraEnhancers;


    var event = new _event2.default();

    // error wrapper
    event.on('error', function (err) {
        throw new Error(err.stack || err);
    });

    var app = {
        // private properties
        _models: [],
        _store: null,
        _event: event,
        // methods
        model: model,
        start: start,
        connect: connect
    };
    return app;

    ////////////////////////////////////
    // Methods

    /**
     * Register a model.
     *
     * @param model
     */
    function model(model) {
        this._models.push(checkModel(model));
    }

    // inject model dynamically
    function injectModel(createReducer, m) {
        if (m.namespace) {
            var hasExisted = this._models.some(function (model) {
                return model.namespace === m.namespace;
            });
            if (hasExisted) {
                return;
            }
        }
        m = checkModel(m);
        this._models.push(m);
        var store = this._store;

        // reducers
        store.additionalReducers[m.namespace] = getReducer(m.reducers, m.state);
        store.replaceReducer(createReducer(store.additionalReducers));
    }

    /**
     * Start the application. Selector is optional. If no selector
     * arguments, it will return a function that return JSX elements.
     *
     * @param container selector | HTMLElement
     * @param RootComponent Component
     * @param onRendered rendered callback
     */
    function start(container, RootComponent, onRendered) {
        var _this = this;

        // support selector
        if (typeof container === 'string') {
            container = _document2.default.querySelector(container);
            (0, _invariant2.default)(container, 'deef->start: could not query selector: ' + container);
        }

        (0, _invariant2.default)(!container || isHTMLElement(container), 'deef->start: container should be HTMLElement');

        var reducers = (0, _extends3.default)({}, initialReducer);
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = (0, _getIterator3.default)(this._models), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var m = _step.value;

                reducers[m.namespace] = getReducer(m.reducers, m.state);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        var devTools = function devTools() {
            return function (noop) {
                return noop;
            };
        };
        if (process.env.NODE_ENV !== 'production' && _window2.default.__REDUX_DEVTOOLS_EXTENSION__) {
            devTools = _window2.default.__REDUX_DEVTOOLS_EXTENSION__;
        }
        var enhancers = [_redux.applyMiddleware.apply(undefined, (0, _toConsumableArray3.default)(extraMiddlewares)), devTools()].concat((0, _toConsumableArray3.default)(extraEnhancers));
        var store = this._store = (0, _redux.createStore)(createReducer(), initialState, _redux.compose.apply(undefined, (0, _toConsumableArray3.default)(enhancers)));

        function createReducer() {
            var additionalReducers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return (0, _redux.combineReducers)((0, _extends3.default)({}, reducers, additionalReducers));
        }

        store.additionalReducers = {};

        // inject model after start
        this.model = injectModel.bind(this, createReducer);

        // If has container, render; else, return react component
        if (container) {
            render(container, store, RootComponent, onRendered);
            event.on('hmr', function (Component) {
                return render.call(_this, container, store, Component, onRendered);
            });
        } else {
            return getProvider(store, RootComponent);
        }
    }

    function buildHandler(handler) {
        var actionMeta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            try {
                return handler.call.apply(handler, [null, {
                    getState: app._store.getState,
                    dispatch: function dispatch(action) {
                        action.meta = (0, _extends3.default)({}, actionMeta, action.meta || {});
                        app._store.dispatch(action);
                    }
                }].concat(args));
            } catch (err) {
                event.trigger('error', [err]);
            }
        };
    }

    // 使用react-redux-hk来优化性能
    function connect(getUIState, callbacks, mergeProps) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        (0, _invariant2.default)(typeof getUIState === 'undefined' || typeof getUIState === 'function', 'deef->connect: getUIState should be function');
        var mapStateToProps = getUIState;
        var mapDispatchToProps = !callbacks ? undefined : function () {
            if (!callbacks.initializedCallbacks) {
                (0, _invariant2.default)((0, _isPlainObject2.default)(callbacks), 'deef->connect: callbacks should be plain object');
                var initializedCallbacks = {};
                (0, _keys2.default)(callbacks).map(function (key) {
                    (0, _invariant2.default)(typeof callbacks[key] === 'function', 'deef->connect: callbacks\'s each item should be function, but found ' + key);
                    event.trigger('injectCallback', [key, callbacks[key]]);
                    initializedCallbacks[key] = buildHandler(callbacks[key], { _callback: key });
                });
                callbacks.initializedCallbacks = initializedCallbacks;
            }
            return callbacks.initializedCallbacks;
        };
        return function (UI) {
            return (0, _reactReduxHk.connect)(mapStateToProps, mapDispatchToProps, mergeProps, options)(UI);
        };
    }

    ////////////////////////////////////
    // Helpers
    function getProvider(store, RootComponent) {
        return function () {
            return _react2.default.createElement(
                _reactReduxHk.Provider,
                { store: store },
                _react2.default.createElement(RootComponent, null)
            );
        };
    }

    function render(container, store, RootComponent) {
        var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _noop2.default;

        _reactDom2.default.render(_react2.default.createElement(getProvider(store, RootComponent)), container, cb.bind(null, store));
    }

    function checkModel(m) {
        // Clone model to avoid prefixing namespace multiple times
        var model = (0, _extends3.default)({}, m);
        var namespace = model.namespace,
            reducers = model.reducers;


        (0, _invariant2.default)(namespace, 'deef->model: namespace should be defined');
        (0, _invariant2.default)(!reducers || (0, _isPlainObject2.default)(reducers) || Array.isArray(reducers), 'deef->model: reducers should be plain object or array');
        (0, _invariant2.default)(!Array.isArray(reducers) || (0, _isPlainObject2.default)(reducers[0]) && typeof reducers[1] === 'function', 'deef->model: reducers with array should be app.model({ reducers: [object, function] })');
        (0, _invariant2.default)(!app._models.some(function (model) {
            return model.namespace === namespace;
        }), 'app.model: namespace should be unique');

        function getNamespacedReducers(reducers) {
            return (0, _keys2.default)(reducers).reduce(function (memo, key) {
                (0, _invariant2.default)(key.indexOf('' + namespace + SEP) !== 0, 'deef->model: reducer ' + key + ' should not be prefixed with namespace ' + namespace);
                memo['' + namespace + SEP + key] = reducers[key];
                return memo;
            }, {});
        }

        if (model.reducers) {
            if (Array.isArray(model.reducers)) {
                model.reducers[0] = getNamespacedReducers(model.reducers[0]);
            } else {
                model.reducers = getNamespacedReducers(model.reducers);
            }
        }

        return model;
    }

    function isHTMLElement(node) {
        return (typeof node === 'undefined' ? 'undefined' : (0, _typeof3.default)(node)) === 'object' && node !== null && node.nodeType && node.nodeName;
    }

    function getReducer(reducers, state) {
        if (Array.isArray(reducers)) {
            return reducers[1]((0, _handleActions2.default)(reducers[0], state));
        } else {
            return (0, _handleActions2.default)(reducers || {}, state);
        }
    }
};

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _redux = require('redux');

var _reactReduxHk = require('react-redux-hk');

var _handleActions = require('./handleActions');

var _handleActions2 = _interopRequireDefault(_handleActions);

var _isPlainObject = require('lodash-es/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _noop = require('lodash-es/noop');

var _noop2 = _interopRequireDefault(_noop);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _window = require('global/window');

var _window2 = _interopRequireDefault(_window);

var _document = require('global/document');

var _document2 = _interopRequireDefault(_document);

var _event = require('./event');

var _event2 = _interopRequireDefault(_event);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SEP = '/'; /**
                * @file deef
                * @copyright Copyright (c) 2017 Baidu, Inc. All Rights Reserved.
                */
;