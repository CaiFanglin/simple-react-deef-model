'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.connect = exports.Provider = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Created by Homkai on 16/12/12.
                                                                                                                                                                                                                                                                   */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _shallowEqual = require('react-redux/lib/utils/shallowEqual');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var PATH_SEP = '//';
var DEP_STATE_DEPTH = 2;
var DEP_OWN_PROPS_DEPTH = 1;

var __depCache__ = {};
var __trueState__ = {};

function connect(mapStateToProps, mapDispatchToProps) {
    var mergeProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    // pureMapState表示mapStateToProps是否是纯函数，只依赖state和ownProps
    var _options$pureMapState = options.pureMapState,
        pureMapState = _options$pureMapState === undefined ? true : _options$pureMapState,
        _options$depStateDept = options.depStateDepth,
        depStateDepth = _options$depStateDept === undefined ? DEP_STATE_DEPTH : _options$depStateDept;

    var uid = mapStateToProps.toString() + PATH_SEP + Math.random();
    return function (Component) {
        var mapDepState = !mapStateToProps ? undefined : function (state, ownProps) {
            var depState = null;
            // 如果是pureMapState则优先读缓存，避免重复分析depState
            if (pureMapState && getDepStateCache(uid)) {
                depState = {};
                Object.keys(getDepStateCache(uid)).forEach(function (path) {
                    return depState[path] = getValueByPath(state, path);
                });
                // 如果新的depState有更新（shallowEqual不一致），则重新分析依赖
                if (updateDepStateCache(uid, depState)) {
                    depState = null;
                }
            }
            if (!depState) {
                var result = analyzeDepState(uid, state, ownProps, mapStateToProps, depStateDepth);
                depState = result.depState;
                pureMapState = result.cacheable;
                __trueState__[uid] = result.stateProps;
            }
            var props = _extends({}, depState);
            props.__trueState__ = __trueState__[uid];
            var tempList = [].concat(_toConsumableArray(Object.keys(props)), ['__tempList__']);
            return _extends({}, props, {
                __tempList__: tempList.join(',')
            });
        };
        return (0, _reactRedux.connect)(mapDepState, mapDispatchToProps, mergeProps, options)(buildGuardComponent(Component));
    };
}

// 就相当于给component一个门卫一样
// 如果depState没变，门卫不会重新计算mapStateToProps，也不会通知component重新渲染
function buildGuardComponent(Component) {
    return function (props) {
        var stateAndCallbacks = props;
        if (props.__trueState__) {
            var validProps = _extends({}, props);
            var tempList = props.__tempList__.split(',');
            Object.keys(validProps).forEach(function (key) {
                return tempList.indexOf(key) > -1 && delete validProps[key];
            });
            stateAndCallbacks = _extends({}, validProps, props.__trueState__);
        }
        return _react2.default.createElement(Component, stateAndCallbacks);
    };
}

// 分析mapStateToProps真正依赖到的状态 depState
function analyzeDepState(uid, state, ownProps, mapState, depStateDepth) {
    var stateUid = uid + PATH_SEP + 'state';
    var ownPropsUid = uid + PATH_SEP + 'ownProps';

    var _buildCacheDep = buildCacheDep(stateUid),
        cacheDepState = _buildCacheDep.cacheDep,
        depState = _buildCacheDep.dep;

    var stateProxy = proxyObj(state, cacheDepState, depStateDepth);

    var _buildCacheDep2 = buildCacheDep(ownPropsUid),
        cacheDepProps = _buildCacheDep2.cacheDep,
        depProps = _buildCacheDep2.dep;

    var propsProxy = proxyObj(ownProps, cacheDepProps, DEP_OWN_PROPS_DEPTH);
    var stateProps = mapState(stateProxy, propsProxy);

    var ret = { stateProps: stateProps };

    // 判断是否依赖ownProps，如果依赖，则不缓存
    ret.cacheable = !Object.keys(depProps).length;
    removeDepCache(ownPropsUid);

    // 过滤依赖obj.key而不依赖obj的depState
    var depObjStatePathList = Object.keys(depState).filter(function (item) {
        return item.split(PATH_SEP).length <= depStateDepth && _typeof(depState[item]) === 'object';
    });
    if (depObjStatePathList.length) {
        var depObjStateRefList = depObjStatePathList.map(function (item) {
            return depState[item];
        });
        removeObjStateDep(depObjStateRefList, stateProps);
        Object.keys(depState).forEach(function (key) {
            if (depObjStateRefList.indexOf(depState[key]) > -1) {
                delete depState[key];
            }
        });
    }
    ret.depState = depState;

    return ret;
}

// 当依赖了具体的obj.key时，移除实际不需要的对整个obj的依赖
function removeObjStateDep(depObjStateRefList, stateProps) {
    if (depObjStateRefList.indexOf(stateProps) > -1) {
        depObjStateRefList.splice(depObjStateRefList.indexOf(stateProps), 1);
        if (!depObjStateRefList.length) {
            return;
        }
    }
    if (stateProps && (typeof stateProps === 'undefined' ? 'undefined' : _typeof(stateProps)) === 'object') {
        var statePropsKeyList = Object.keys(stateProps);
        for (var i = 0; i < statePropsKeyList.length; i++) {
            var value = stateProps[statePropsKeyList[i]];
            value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && removeObjStateDep(depObjStateRefList, value);
        }
    }
}

function buildCacheDep(uid) {
    __depCache__[uid] = __depCache__[uid] || {};
    var dep = __depCache__[uid];
    return {
        cacheDep: function cacheDep(path, value) {
            dep[path] = value;
        },
        dep: dep
    };
}

function getDepStateCache(uid) {
    return __depCache__[uid + PATH_SEP + 'state'];
}

function updateDepStateCache(uid, depState) {
    if ((0, _shallowEqual2.default)(__depCache__[uid + PATH_SEP + 'state'], depState)) {
        return false;
    }
    __depCache__[uid + PATH_SEP + 'state'] = _extends({}, depState);
    return true;
}

function removeDepCache(uid) {
    delete __depCache__[uid];
}

function proxyObj(obj, cb) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
    var keyPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : PATH_SEP;

    var objProxy = keyPath === PATH_SEP ? {} : obj;
    Object.keys(obj).forEach(function (key) {
        var path = keyPath + key;
        var value = obj[key];
        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && depth > 1) {
            value = Array.isArray(obj[key]) ? [].concat(_toConsumableArray(obj[key])) : _extends({}, obj[key]);
            value && proxyObj(value, cb, depth - 1, path + PATH_SEP);
        }
        Object.defineProperty(objProxy, key, {
            get: function get() {
                cb(path, value);
                return value;
            }
        });
    });
    return objProxy;
}

function getValueByPath(obj, path) {
    var keyList = path.split(PATH_SEP);
    var ret = obj;
    for (var i = 0; i < keyList.length; i++) {
        if (!keyList[i]) {
            continue;
        }
        ret = ret[keyList[i]];
    }
    return ret;
}

exports.Provider = _reactRedux.Provider;
exports.connect = connect;